#!/bin/bash

set -e

REPO_ROOT=$(git rev-parse --show-toplevel)
DIFF_FILTER=ACMR

CHANGES=$(git diff --name-only origin/main --cached --diff-filter=$DIFF_FILTER)


if [ -z "$CHANGES" ]
then
  echo "No changes"
  exit 1
fi

update_schemas() {
  local workspace=$1
  local contract=$2
  if [[ $CHANGES == *smart-contracts/${workspace}/contracts/${contract}/* ]]
  then
    echo "Changes in ${contract} contract"
    cd ${REPO_ROOT}/smart-contracts/${workspace}/contracts/${contract}

    # generate schemas
    cargo schema
    NEW_CHANGES=$(git diff --name-only origin/main --diff-filter=$DIFF_FILTER)
    if [[ $NEW_CHANGES == *${workspace}/contracts/${contract}/schema* ]]
    then
      git add schema
    else
      echo "No schema changes for ${contract}."
    fi
  fi
}

fix_formatting() {
  local target=$1
  if [[ $CHANGES == *smart-contracts/${target}* ]]
  then
    echo "Changes in ${target}"
    cd ${REPO_ROOT}/smart-contracts/${target}
    # fix formatting
    echo "format"
    cargo fmt --all
    cd ${REPO_ROOT}
    NEW_CHANGES=$(git diff --name-only origin/main --cached --diff-filter=$DIFF_FILTER)
    git add $NEW_CHANGES
  fi
}

check_lint() {
  local target=$1
  if [[ $CHANGES == *smart-contracts/${target}* ]]
  then
    echo "Changes in ${target}"
    cd ${REPO_ROOT}/smart-contracts/${target}
    cargo clippy --all-targets -- -D warnings -A clippy::doc_lazy_continuation
    cd -
  fi
}

update_schemas contracts babylon-vault
fix_formatting contracts/babylon-vault
check_lint contracts/babylon-vault

update_schemas contracts dummy-oracle
fix_formatting contracts/dummy-oracle
check_lint contracts/dummy-oracle

update_schemas contracts mock-gauge
fix_formatting contracts/mock-gauge
check_lint contracts/mock-gauge

update_schemas packages interfaces
fix_formatting packages/interfaces
check_lint packages/interfaces

update_schemas packages quasar-std
fix_formatting packages/quasar-std
check_lint packages/quasar-std

update_schemas packages quasar-std-derive
fix_formatting packages/quasar-std-derive
check_lint packages/quasar-std-derive